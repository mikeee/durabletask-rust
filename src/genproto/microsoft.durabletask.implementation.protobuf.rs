// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrchestrationInstance {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub execution_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub orchestration_instance: ::core::option::Option<OrchestrationInstance>,
    #[prost(int32, tag = "5")]
    pub task_id: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityResponse {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub task_id: i32,
    #[prost(message, optional, tag = "3")]
    pub result: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub failure_details: ::core::option::Option<TaskFailureDetails>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskFailureDetails {
    #[prost(string, tag = "1")]
    pub error_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub stack_trace: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, boxed, tag = "4")]
    pub inner_failure: ::core::option::Option<::prost::alloc::boxed::Box<TaskFailureDetails>>,
    #[prost(bool, tag = "5")]
    pub is_non_retriable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParentInstanceInfo {
    #[prost(int32, tag = "1")]
    pub task_scheduled_id: i32,
    #[prost(message, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub orchestration_instance: ::core::option::Option<OrchestrationInstance>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraceContext {
    #[prost(string, tag = "1")]
    pub trace_parent: ::prost::alloc::string::String,
    #[deprecated]
    #[prost(string, tag = "2")]
    pub span_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub trace_state: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecutionStartedEvent {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub orchestration_instance: ::core::option::Option<OrchestrationInstance>,
    #[prost(message, optional, tag = "5")]
    pub parent_instance: ::core::option::Option<ParentInstanceInfo>,
    #[prost(message, optional, tag = "6")]
    pub scheduled_start_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub parent_trace_context: ::core::option::Option<TraceContext>,
    #[prost(message, optional, tag = "8")]
    pub orchestration_span_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecutionCompletedEvent {
    #[prost(enumeration = "OrchestrationStatus", tag = "1")]
    pub orchestration_status: i32,
    #[prost(message, optional, tag = "2")]
    pub result: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub failure_details: ::core::option::Option<TaskFailureDetails>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecutionTerminatedEvent {
    #[prost(message, optional, tag = "1")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, tag = "2")]
    pub recurse: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskScheduledEvent {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub parent_trace_context: ::core::option::Option<TraceContext>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskCompletedEvent {
    #[prost(int32, tag = "1")]
    pub task_scheduled_id: i32,
    #[prost(message, optional, tag = "2")]
    pub result: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskFailedEvent {
    #[prost(int32, tag = "1")]
    pub task_scheduled_id: i32,
    #[prost(message, optional, tag = "2")]
    pub failure_details: ::core::option::Option<TaskFailureDetails>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubOrchestrationInstanceCreatedEvent {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub parent_trace_context: ::core::option::Option<TraceContext>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubOrchestrationInstanceCompletedEvent {
    #[prost(int32, tag = "1")]
    pub task_scheduled_id: i32,
    #[prost(message, optional, tag = "2")]
    pub result: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubOrchestrationInstanceFailedEvent {
    #[prost(int32, tag = "1")]
    pub task_scheduled_id: i32,
    #[prost(message, optional, tag = "2")]
    pub failure_details: ::core::option::Option<TaskFailureDetails>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimerCreatedEvent {
    #[prost(message, optional, tag = "1")]
    pub fire_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimerFiredEvent {
    #[prost(message, optional, tag = "1")]
    pub fire_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(int32, tag = "2")]
    pub timer_id: i32,
}
/// No payload data
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrchestratorStartedEvent {}
/// No payload data
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrchestratorCompletedEvent {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventSentEvent {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventRaisedEvent {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenericEvent {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HistoryStateEvent {
    #[prost(message, optional, tag = "1")]
    pub orchestration_state: ::core::option::Option<OrchestrationState>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContinueAsNewEvent {
    #[prost(message, optional, tag = "1")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecutionSuspendedEvent {
    #[prost(message, optional, tag = "1")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecutionResumedEvent {
    #[prost(message, optional, tag = "1")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HistoryEvent {
    #[prost(int32, tag = "1")]
    pub event_id: i32,
    #[prost(message, optional, tag = "2")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(
        oneof = "history_event::EventType",
        tags = "3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22"
    )]
    pub event_type: ::core::option::Option<history_event::EventType>,
}
/// Nested message and enum types in `HistoryEvent`.
pub mod history_event {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EventType {
        #[prost(message, tag = "3")]
        ExecutionStarted(super::ExecutionStartedEvent),
        #[prost(message, tag = "4")]
        ExecutionCompleted(super::ExecutionCompletedEvent),
        #[prost(message, tag = "5")]
        ExecutionTerminated(super::ExecutionTerminatedEvent),
        #[prost(message, tag = "6")]
        TaskScheduled(super::TaskScheduledEvent),
        #[prost(message, tag = "7")]
        TaskCompleted(super::TaskCompletedEvent),
        #[prost(message, tag = "8")]
        TaskFailed(super::TaskFailedEvent),
        #[prost(message, tag = "9")]
        SubOrchestrationInstanceCreated(super::SubOrchestrationInstanceCreatedEvent),
        #[prost(message, tag = "10")]
        SubOrchestrationInstanceCompleted(super::SubOrchestrationInstanceCompletedEvent),
        #[prost(message, tag = "11")]
        SubOrchestrationInstanceFailed(super::SubOrchestrationInstanceFailedEvent),
        #[prost(message, tag = "12")]
        TimerCreated(super::TimerCreatedEvent),
        #[prost(message, tag = "13")]
        TimerFired(super::TimerFiredEvent),
        #[prost(message, tag = "14")]
        OrchestratorStarted(super::OrchestratorStartedEvent),
        #[prost(message, tag = "15")]
        OrchestratorCompleted(super::OrchestratorCompletedEvent),
        #[prost(message, tag = "16")]
        EventSent(super::EventSentEvent),
        #[prost(message, tag = "17")]
        EventRaised(super::EventRaisedEvent),
        #[prost(message, tag = "18")]
        GenericEvent(super::GenericEvent),
        #[prost(message, tag = "19")]
        HistoryState(super::HistoryStateEvent),
        #[prost(message, tag = "20")]
        ContinueAsNew(super::ContinueAsNewEvent),
        #[prost(message, tag = "21")]
        ExecutionSuspended(super::ExecutionSuspendedEvent),
        #[prost(message, tag = "22")]
        ExecutionResumed(super::ExecutionResumedEvent),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScheduleTaskAction {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSubOrchestrationAction {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTimerAction {
    #[prost(message, optional, tag = "1")]
    pub fire_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendEventAction {
    #[prost(message, optional, tag = "1")]
    pub instance: ::core::option::Option<OrchestrationInstance>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompleteOrchestrationAction {
    #[prost(enumeration = "OrchestrationStatus", tag = "1")]
    pub orchestration_status: i32,
    #[prost(message, optional, tag = "2")]
    pub result: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub details: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub new_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "5")]
    pub carryover_events: ::prost::alloc::vec::Vec<HistoryEvent>,
    #[prost(message, optional, tag = "6")]
    pub failure_details: ::core::option::Option<TaskFailureDetails>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TerminateOrchestrationAction {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, tag = "3")]
    pub recurse: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrchestratorAction {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(
        oneof = "orchestrator_action::OrchestratorActionType",
        tags = "2, 3, 4, 5, 6, 7"
    )]
    pub orchestrator_action_type:
        ::core::option::Option<orchestrator_action::OrchestratorActionType>,
}
/// Nested message and enum types in `OrchestratorAction`.
pub mod orchestrator_action {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum OrchestratorActionType {
        #[prost(message, tag = "2")]
        ScheduleTask(super::ScheduleTaskAction),
        #[prost(message, tag = "3")]
        CreateSubOrchestration(super::CreateSubOrchestrationAction),
        #[prost(message, tag = "4")]
        CreateTimer(super::CreateTimerAction),
        #[prost(message, tag = "5")]
        SendEvent(super::SendEventAction),
        #[prost(message, tag = "6")]
        CompleteOrchestration(super::CompleteOrchestrationAction),
        #[prost(message, tag = "7")]
        TerminateOrchestration(super::TerminateOrchestrationAction),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrchestratorRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub execution_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "3")]
    pub past_events: ::prost::alloc::vec::Vec<HistoryEvent>,
    #[prost(message, repeated, tag = "4")]
    pub new_events: ::prost::alloc::vec::Vec<HistoryEvent>,
    #[prost(message, optional, tag = "5")]
    pub entity_parameters: ::core::option::Option<OrchestratorEntityParameters>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrchestratorResponse {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub actions: ::prost::alloc::vec::Vec<OrchestratorAction>,
    #[prost(message, optional, tag = "3")]
    pub custom_status: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInstanceRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub scheduled_start_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub orchestration_id_reuse_policy: ::core::option::Option<OrchestrationIdReusePolicy>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrchestrationIdReusePolicy {
    #[prost(enumeration = "OrchestrationStatus", repeated, tag = "1")]
    pub operation_status: ::prost::alloc::vec::Vec<i32>,
    #[prost(enumeration = "CreateOrchestrationAction", tag = "2")]
    pub action: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInstanceResponse {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInstanceRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub get_inputs_and_outputs: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInstanceResponse {
    #[prost(bool, tag = "1")]
    pub exists: bool,
    #[prost(message, optional, tag = "2")]
    pub orchestration_state: ::core::option::Option<OrchestrationState>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RewindInstanceRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
}
/// Empty for now. Using explicit type incase we want to add content later.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RewindInstanceResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrchestrationState {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "OrchestrationStatus", tag = "4")]
    pub orchestration_status: i32,
    #[prost(message, optional, tag = "5")]
    pub scheduled_start_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "6")]
    pub created_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub last_updated_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "9")]
    pub output: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "10")]
    pub custom_status: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "11")]
    pub failure_details: ::core::option::Option<TaskFailureDetails>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RaiseEventRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
}
/// No payload
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RaiseEventResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TerminateRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub output: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, tag = "3")]
    pub recursive: bool,
}
/// No payload
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TerminateResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SuspendRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
}
/// No payload
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SuspendResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResumeRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
}
/// No payload
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResumeResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryInstancesRequest {
    #[prost(message, optional, tag = "1")]
    pub query: ::core::option::Option<InstanceQuery>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstanceQuery {
    #[prost(enumeration = "OrchestrationStatus", repeated, tag = "1")]
    pub runtime_status: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "2")]
    pub created_time_from: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub created_time_to: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, repeated, tag = "4")]
    pub task_hub_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag = "5")]
    pub max_instance_count: i32,
    #[prost(message, optional, tag = "6")]
    pub continuation_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "7")]
    pub instance_id_prefix: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, tag = "8")]
    pub fetch_inputs_and_outputs: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryInstancesResponse {
    #[prost(message, repeated, tag = "1")]
    pub orchestration_state: ::prost::alloc::vec::Vec<OrchestrationState>,
    #[prost(message, optional, tag = "2")]
    pub continuation_token: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PurgeInstancesRequest {
    #[prost(bool, tag = "3")]
    pub recursive: bool,
    #[prost(oneof = "purge_instances_request::Request", tags = "1, 2")]
    pub request: ::core::option::Option<purge_instances_request::Request>,
}
/// Nested message and enum types in `PurgeInstancesRequest`.
pub mod purge_instances_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Request {
        #[prost(string, tag = "1")]
        InstanceId(::prost::alloc::string::String),
        #[prost(message, tag = "2")]
        PurgeInstanceFilter(super::PurgeInstanceFilter),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PurgeInstanceFilter {
    #[prost(message, optional, tag = "1")]
    pub created_time_from: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub created_time_to: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(enumeration = "OrchestrationStatus", repeated, tag = "3")]
    pub runtime_status: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PurgeInstancesResponse {
    #[prost(int32, tag = "1")]
    pub deleted_instance_count: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTaskHubRequest {
    #[prost(bool, tag = "1")]
    pub recreate_if_exists: bool,
}
/// no playload
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTaskHubResponse {}
/// no playload
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteTaskHubRequest {}
/// no playload
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteTaskHubResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignalEntityRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub scheduled_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// no payload
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignalEntityResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEntityRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub include_state: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEntityResponse {
    #[prost(bool, tag = "1")]
    pub exists: bool,
    #[prost(message, optional, tag = "2")]
    pub entity: ::core::option::Option<EntityMetadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityQuery {
    #[prost(message, optional, tag = "1")]
    pub instance_id_starts_with: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub last_modified_from: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "3")]
    pub last_modified_to: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(bool, tag = "4")]
    pub include_state: bool,
    #[prost(bool, tag = "5")]
    pub include_transient: bool,
    #[prost(message, optional, tag = "6")]
    pub page_size: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "7")]
    pub continuation_token: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEntitiesRequest {
    #[prost(message, optional, tag = "1")]
    pub query: ::core::option::Option<EntityQuery>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEntitiesResponse {
    #[prost(message, repeated, tag = "1")]
    pub entities: ::prost::alloc::vec::Vec<EntityMetadata>,
    #[prost(message, optional, tag = "2")]
    pub continuation_token: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityMetadata {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub last_modified_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(int32, tag = "3")]
    pub backlog_queue_size: i32,
    #[prost(message, optional, tag = "4")]
    pub locked_by: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub serialized_state: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CleanEntityStorageRequest {
    #[prost(message, optional, tag = "1")]
    pub continuation_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, tag = "2")]
    pub remove_empty_entities: bool,
    #[prost(bool, tag = "3")]
    pub release_orphaned_locks: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CleanEntityStorageResponse {
    #[prost(message, optional, tag = "1")]
    pub continuation_token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, tag = "2")]
    pub empty_entities_removed: i32,
    #[prost(int32, tag = "3")]
    pub orphaned_locks_released: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrchestratorEntityParameters {
    #[prost(message, optional, tag = "1")]
    pub entity_message_reorder_window: ::core::option::Option<::prost_types::Duration>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityBatchRequest {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub entity_state: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "3")]
    pub operations: ::prost::alloc::vec::Vec<OperationRequest>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityBatchResult {
    #[prost(message, repeated, tag = "1")]
    pub results: ::prost::alloc::vec::Vec<OperationResult>,
    #[prost(message, repeated, tag = "2")]
    pub actions: ::prost::alloc::vec::Vec<OperationAction>,
    #[prost(message, optional, tag = "3")]
    pub entity_state: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub failure_details: ::core::option::Option<TaskFailureDetails>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationRequest {
    #[prost(string, tag = "1")]
    pub operation: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationResult {
    #[prost(oneof = "operation_result::ResultType", tags = "1, 2")]
    pub result_type: ::core::option::Option<operation_result::ResultType>,
}
/// Nested message and enum types in `OperationResult`.
pub mod operation_result {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ResultType {
        #[prost(message, tag = "1")]
        Success(super::OperationResultSuccess),
        #[prost(message, tag = "2")]
        Failure(super::OperationResultFailure),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationResultSuccess {
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationResultFailure {
    #[prost(message, optional, tag = "1")]
    pub failure_details: ::core::option::Option<TaskFailureDetails>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationAction {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(oneof = "operation_action::OperationActionType", tags = "2, 3")]
    pub operation_action_type: ::core::option::Option<operation_action::OperationActionType>,
}
/// Nested message and enum types in `OperationAction`.
pub mod operation_action {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum OperationActionType {
        #[prost(message, tag = "2")]
        SendSignal(super::SendSignalAction),
        #[prost(message, tag = "3")]
        StartNewOrchestration(super::StartNewOrchestrationAction),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendSignalAction {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub scheduled_time: ::core::option::Option<::prost_types::Timestamp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartNewOrchestrationAction {
    #[prost(string, tag = "1")]
    pub instance_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub input: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub scheduled_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// No parameters currently
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWorkItemsRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WorkItem {
    #[prost(oneof = "work_item::Request", tags = "1, 2, 3")]
    pub request: ::core::option::Option<work_item::Request>,
}
/// Nested message and enum types in `WorkItem`.
pub mod work_item {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Request {
        #[prost(message, tag = "1")]
        OrchestratorRequest(super::OrchestratorRequest),
        #[prost(message, tag = "2")]
        ActivityRequest(super::ActivityRequest),
        #[prost(message, tag = "3")]
        EntityRequest(super::EntityBatchRequest),
    }
}
/// No payload
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompleteTaskResponse {}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrchestrationStatus {
    Running = 0,
    Completed = 1,
    ContinuedAsNew = 2,
    Failed = 3,
    Canceled = 4,
    Terminated = 5,
    Pending = 6,
    Suspended = 7,
}
impl OrchestrationStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OrchestrationStatus::Running => "ORCHESTRATION_STATUS_RUNNING",
            OrchestrationStatus::Completed => "ORCHESTRATION_STATUS_COMPLETED",
            OrchestrationStatus::ContinuedAsNew => "ORCHESTRATION_STATUS_CONTINUED_AS_NEW",
            OrchestrationStatus::Failed => "ORCHESTRATION_STATUS_FAILED",
            OrchestrationStatus::Canceled => "ORCHESTRATION_STATUS_CANCELED",
            OrchestrationStatus::Terminated => "ORCHESTRATION_STATUS_TERMINATED",
            OrchestrationStatus::Pending => "ORCHESTRATION_STATUS_PENDING",
            OrchestrationStatus::Suspended => "ORCHESTRATION_STATUS_SUSPENDED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ORCHESTRATION_STATUS_RUNNING" => Some(Self::Running),
            "ORCHESTRATION_STATUS_COMPLETED" => Some(Self::Completed),
            "ORCHESTRATION_STATUS_CONTINUED_AS_NEW" => Some(Self::ContinuedAsNew),
            "ORCHESTRATION_STATUS_FAILED" => Some(Self::Failed),
            "ORCHESTRATION_STATUS_CANCELED" => Some(Self::Canceled),
            "ORCHESTRATION_STATUS_TERMINATED" => Some(Self::Terminated),
            "ORCHESTRATION_STATUS_PENDING" => Some(Self::Pending),
            "ORCHESTRATION_STATUS_SUSPENDED" => Some(Self::Suspended),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CreateOrchestrationAction {
    Error = 0,
    Ignore = 1,
    Terminate = 2,
}
impl CreateOrchestrationAction {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CreateOrchestrationAction::Error => "ERROR",
            CreateOrchestrationAction::Ignore => "IGNORE",
            CreateOrchestrationAction::Terminate => "TERMINATE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ERROR" => Some(Self::Error),
            "IGNORE" => Some(Self::Ignore),
            "TERMINATE" => Some(Self::Terminate),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod task_hub_sidecar_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct TaskHubSidecarServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TaskHubSidecarServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TaskHubSidecarServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TaskHubSidecarServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            TaskHubSidecarServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Sends a hello request to the sidecar service.
        pub async fn hello(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/Hello",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "Hello",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Starts a new orchestration instance.
        pub async fn start_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateInstanceResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/StartInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "StartInstance",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Gets the status of an existing orchestration instance.
        pub async fn get_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::GetInstanceResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/GetInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "GetInstance",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Rewinds an orchestration instance to last known good state and replays from there.
        pub async fn rewind_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::RewindInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::RewindInstanceResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/RewindInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "RewindInstance",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Waits for an orchestration instance to reach a running or completion state.
        pub async fn wait_for_instance_start(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::GetInstanceResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/WaitForInstanceStart",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "WaitForInstanceStart",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Waits for an orchestration instance to reach a completion state (completed, failed, terminated, etc.).
        pub async fn wait_for_instance_completion(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::GetInstanceResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/WaitForInstanceCompletion",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "WaitForInstanceCompletion",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Raises an event to a running orchestration instance.
        pub async fn raise_event(
            &mut self,
            request: impl tonic::IntoRequest<super::RaiseEventRequest>,
        ) -> std::result::Result<tonic::Response<super::RaiseEventResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/RaiseEvent",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "RaiseEvent",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Terminates a running orchestration instance.
        pub async fn terminate_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::TerminateRequest>,
        ) -> std::result::Result<tonic::Response<super::TerminateResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/TerminateInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "TerminateInstance",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Suspends a running orchestration instance.
        pub async fn suspend_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::SuspendRequest>,
        ) -> std::result::Result<tonic::Response<super::SuspendResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/SuspendInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "SuspendInstance",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Resumes a suspended orchestration instance.
        pub async fn resume_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::ResumeRequest>,
        ) -> std::result::Result<tonic::Response<super::ResumeResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/ResumeInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "ResumeInstance",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn query_instances(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryInstancesRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryInstancesResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/QueryInstances",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "QueryInstances",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn purge_instances(
            &mut self,
            request: impl tonic::IntoRequest<super::PurgeInstancesRequest>,
        ) -> std::result::Result<tonic::Response<super::PurgeInstancesResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/PurgeInstances",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "PurgeInstances",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_work_items(
            &mut self,
            request: impl tonic::IntoRequest<super::GetWorkItemsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::WorkItem>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/GetWorkItems",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "GetWorkItems",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn complete_activity_task(
            &mut self,
            request: impl tonic::IntoRequest<super::ActivityResponse>,
        ) -> std::result::Result<tonic::Response<super::CompleteTaskResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/CompleteActivityTask",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "CompleteActivityTask",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn complete_orchestrator_task(
            &mut self,
            request: impl tonic::IntoRequest<super::OrchestratorResponse>,
        ) -> std::result::Result<tonic::Response<super::CompleteTaskResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/CompleteOrchestratorTask",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "CompleteOrchestratorTask",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn complete_entity_task(
            &mut self,
            request: impl tonic::IntoRequest<super::EntityBatchResult>,
        ) -> std::result::Result<tonic::Response<super::CompleteTaskResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/CompleteEntityTask",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "CompleteEntityTask",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Deletes and Creates the necessary resources for the orchestration service and the instance store
        pub async fn create_task_hub(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateTaskHubRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateTaskHubResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/CreateTaskHub",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "CreateTaskHub",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Deletes the resources for the orchestration service and optionally the instance store
        pub async fn delete_task_hub(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteTaskHubRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteTaskHubResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/DeleteTaskHub",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "DeleteTaskHub",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// sends a signal to an entity
        pub async fn signal_entity(
            &mut self,
            request: impl tonic::IntoRequest<super::SignalEntityRequest>,
        ) -> std::result::Result<tonic::Response<super::SignalEntityResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/SignalEntity",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "SignalEntity",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// get information about a specific entity
        pub async fn get_entity(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEntityRequest>,
        ) -> std::result::Result<tonic::Response<super::GetEntityResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/GetEntity",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "GetEntity",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// query entities
        pub async fn query_entities(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryEntitiesRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryEntitiesResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/QueryEntities",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "QueryEntities",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// clean entity storage
        pub async fn clean_entity_storage(
            &mut self,
            request: impl tonic::IntoRequest<super::CleanEntityStorageRequest>,
        ) -> std::result::Result<tonic::Response<super::CleanEntityStorageResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/CleanEntityStorage",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService",
                "CleanEntityStorage",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod task_hub_sidecar_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TaskHubSidecarServiceServer.
    #[async_trait]
    pub trait TaskHubSidecarService: Send + Sync + 'static {
        /// Sends a hello request to the sidecar service.
        async fn hello(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// Starts a new orchestration instance.
        async fn start_instance(
            &self,
            request: tonic::Request<super::CreateInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateInstanceResponse>, tonic::Status>;
        /// Gets the status of an existing orchestration instance.
        async fn get_instance(
            &self,
            request: tonic::Request<super::GetInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::GetInstanceResponse>, tonic::Status>;
        /// Rewinds an orchestration instance to last known good state and replays from there.
        async fn rewind_instance(
            &self,
            request: tonic::Request<super::RewindInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::RewindInstanceResponse>, tonic::Status>;
        /// Waits for an orchestration instance to reach a running or completion state.
        async fn wait_for_instance_start(
            &self,
            request: tonic::Request<super::GetInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::GetInstanceResponse>, tonic::Status>;
        /// Waits for an orchestration instance to reach a completion state (completed, failed, terminated, etc.).
        async fn wait_for_instance_completion(
            &self,
            request: tonic::Request<super::GetInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::GetInstanceResponse>, tonic::Status>;
        /// Raises an event to a running orchestration instance.
        async fn raise_event(
            &self,
            request: tonic::Request<super::RaiseEventRequest>,
        ) -> std::result::Result<tonic::Response<super::RaiseEventResponse>, tonic::Status>;
        /// Terminates a running orchestration instance.
        async fn terminate_instance(
            &self,
            request: tonic::Request<super::TerminateRequest>,
        ) -> std::result::Result<tonic::Response<super::TerminateResponse>, tonic::Status>;
        /// Suspends a running orchestration instance.
        async fn suspend_instance(
            &self,
            request: tonic::Request<super::SuspendRequest>,
        ) -> std::result::Result<tonic::Response<super::SuspendResponse>, tonic::Status>;
        /// Resumes a suspended orchestration instance.
        async fn resume_instance(
            &self,
            request: tonic::Request<super::ResumeRequest>,
        ) -> std::result::Result<tonic::Response<super::ResumeResponse>, tonic::Status>;
        async fn query_instances(
            &self,
            request: tonic::Request<super::QueryInstancesRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryInstancesResponse>, tonic::Status>;
        async fn purge_instances(
            &self,
            request: tonic::Request<super::PurgeInstancesRequest>,
        ) -> std::result::Result<tonic::Response<super::PurgeInstancesResponse>, tonic::Status>;
        /// Server streaming response type for the GetWorkItems method.
        type GetWorkItemsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::WorkItem, tonic::Status>,
            > + Send
            + 'static;
        async fn get_work_items(
            &self,
            request: tonic::Request<super::GetWorkItemsRequest>,
        ) -> std::result::Result<tonic::Response<Self::GetWorkItemsStream>, tonic::Status>;
        async fn complete_activity_task(
            &self,
            request: tonic::Request<super::ActivityResponse>,
        ) -> std::result::Result<tonic::Response<super::CompleteTaskResponse>, tonic::Status>;
        async fn complete_orchestrator_task(
            &self,
            request: tonic::Request<super::OrchestratorResponse>,
        ) -> std::result::Result<tonic::Response<super::CompleteTaskResponse>, tonic::Status>;
        async fn complete_entity_task(
            &self,
            request: tonic::Request<super::EntityBatchResult>,
        ) -> std::result::Result<tonic::Response<super::CompleteTaskResponse>, tonic::Status>;
        /// Deletes and Creates the necessary resources for the orchestration service and the instance store
        async fn create_task_hub(
            &self,
            request: tonic::Request<super::CreateTaskHubRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateTaskHubResponse>, tonic::Status>;
        /// Deletes the resources for the orchestration service and optionally the instance store
        async fn delete_task_hub(
            &self,
            request: tonic::Request<super::DeleteTaskHubRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteTaskHubResponse>, tonic::Status>;
        /// sends a signal to an entity
        async fn signal_entity(
            &self,
            request: tonic::Request<super::SignalEntityRequest>,
        ) -> std::result::Result<tonic::Response<super::SignalEntityResponse>, tonic::Status>;
        /// get information about a specific entity
        async fn get_entity(
            &self,
            request: tonic::Request<super::GetEntityRequest>,
        ) -> std::result::Result<tonic::Response<super::GetEntityResponse>, tonic::Status>;
        /// query entities
        async fn query_entities(
            &self,
            request: tonic::Request<super::QueryEntitiesRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryEntitiesResponse>, tonic::Status>;
        /// clean entity storage
        async fn clean_entity_storage(
            &self,
            request: tonic::Request<super::CleanEntityStorageRequest>,
        ) -> std::result::Result<tonic::Response<super::CleanEntityStorageResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct TaskHubSidecarServiceServer<T: TaskHubSidecarService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: TaskHubSidecarService> TaskHubSidecarServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TaskHubSidecarServiceServer<T>
    where
        T: TaskHubSidecarService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/Hello" => {
                    #[allow(non_camel_case_types)]
                    struct HelloSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<T: TaskHubSidecarService> tonic::server::UnaryService<()>
                    for HelloSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::hello(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HelloSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/StartInstance" => {
                    #[allow(non_camel_case_types)]
                    struct StartInstanceSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::CreateInstanceRequest>
                    for StartInstanceSvc<T> {
                        type Response = super::CreateInstanceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateInstanceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::start_instance(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StartInstanceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/GetInstance" => {
                    #[allow(non_camel_case_types)]
                    struct GetInstanceSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::GetInstanceRequest>
                    for GetInstanceSvc<T> {
                        type Response = super::GetInstanceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetInstanceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::get_instance(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetInstanceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/RewindInstance" => {
                    #[allow(non_camel_case_types)]
                    struct RewindInstanceSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::RewindInstanceRequest>
                    for RewindInstanceSvc<T> {
                        type Response = super::RewindInstanceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RewindInstanceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::rewind_instance(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RewindInstanceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/WaitForInstanceStart" => {
                    #[allow(non_camel_case_types)]
                    struct WaitForInstanceStartSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::GetInstanceRequest>
                    for WaitForInstanceStartSvc<T> {
                        type Response = super::GetInstanceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetInstanceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::wait_for_instance_start(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = WaitForInstanceStartSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/WaitForInstanceCompletion" => {
                    #[allow(non_camel_case_types)]
                    struct WaitForInstanceCompletionSvc<T: TaskHubSidecarService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::GetInstanceRequest>
                    for WaitForInstanceCompletionSvc<T> {
                        type Response = super::GetInstanceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetInstanceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::wait_for_instance_completion(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = WaitForInstanceCompletionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/RaiseEvent" => {
                    #[allow(non_camel_case_types)]
                    struct RaiseEventSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::RaiseEventRequest>
                    for RaiseEventSvc<T> {
                        type Response = super::RaiseEventResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RaiseEventRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::raise_event(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RaiseEventSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/TerminateInstance" => {
                    #[allow(non_camel_case_types)]
                    struct TerminateInstanceSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::TerminateRequest>
                    for TerminateInstanceSvc<T> {
                        type Response = super::TerminateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TerminateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::terminate_instance(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = TerminateInstanceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/SuspendInstance" => {
                    #[allow(non_camel_case_types)]
                    struct SuspendInstanceSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::SuspendRequest>
                    for SuspendInstanceSvc<T> {
                        type Response = super::SuspendResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SuspendRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::suspend_instance(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SuspendInstanceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/ResumeInstance" => {
                    #[allow(non_camel_case_types)]
                    struct ResumeInstanceSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::ResumeRequest>
                    for ResumeInstanceSvc<T> {
                        type Response = super::ResumeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ResumeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::resume_instance(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ResumeInstanceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/QueryInstances" => {
                    #[allow(non_camel_case_types)]
                    struct QueryInstancesSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::QueryInstancesRequest>
                    for QueryInstancesSvc<T> {
                        type Response = super::QueryInstancesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryInstancesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::query_instances(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = QueryInstancesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/PurgeInstances" => {
                    #[allow(non_camel_case_types)]
                    struct PurgeInstancesSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::PurgeInstancesRequest>
                    for PurgeInstancesSvc<T> {
                        type Response = super::PurgeInstancesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PurgeInstancesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::purge_instances(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PurgeInstancesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/GetWorkItems" => {
                    #[allow(non_camel_case_types)]
                    struct GetWorkItemsSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::ServerStreamingService<super::GetWorkItemsRequest>
                    for GetWorkItemsSvc<T> {
                        type Response = super::WorkItem;
                        type ResponseStream = T::GetWorkItemsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetWorkItemsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::get_work_items(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetWorkItemsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/CompleteActivityTask" => {
                    #[allow(non_camel_case_types)]
                    struct CompleteActivityTaskSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::ActivityResponse>
                    for CompleteActivityTaskSvc<T> {
                        type Response = super::CompleteTaskResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ActivityResponse>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::complete_activity_task(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CompleteActivityTaskSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/CompleteOrchestratorTask" => {
                    #[allow(non_camel_case_types)]
                    struct CompleteOrchestratorTaskSvc<T: TaskHubSidecarService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::OrchestratorResponse>
                    for CompleteOrchestratorTaskSvc<T> {
                        type Response = super::CompleteTaskResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::OrchestratorResponse>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::complete_orchestrator_task(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CompleteOrchestratorTaskSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/CompleteEntityTask" => {
                    #[allow(non_camel_case_types)]
                    struct CompleteEntityTaskSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::EntityBatchResult>
                    for CompleteEntityTaskSvc<T> {
                        type Response = super::CompleteTaskResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EntityBatchResult>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::complete_entity_task(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CompleteEntityTaskSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/CreateTaskHub" => {
                    #[allow(non_camel_case_types)]
                    struct CreateTaskHubSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::CreateTaskHubRequest>
                    for CreateTaskHubSvc<T> {
                        type Response = super::CreateTaskHubResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateTaskHubRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::create_task_hub(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateTaskHubSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/DeleteTaskHub" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteTaskHubSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::DeleteTaskHubRequest>
                    for DeleteTaskHubSvc<T> {
                        type Response = super::DeleteTaskHubResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteTaskHubRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::delete_task_hub(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteTaskHubSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/SignalEntity" => {
                    #[allow(non_camel_case_types)]
                    struct SignalEntitySvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::SignalEntityRequest>
                    for SignalEntitySvc<T> {
                        type Response = super::SignalEntityResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SignalEntityRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::signal_entity(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SignalEntitySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/GetEntity" => {
                    #[allow(non_camel_case_types)]
                    struct GetEntitySvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::GetEntityRequest>
                    for GetEntitySvc<T> {
                        type Response = super::GetEntityResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetEntityRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::get_entity(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetEntitySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/QueryEntities" => {
                    #[allow(non_camel_case_types)]
                    struct QueryEntitiesSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::QueryEntitiesRequest>
                    for QueryEntitiesSvc<T> {
                        type Response = super::QueryEntitiesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryEntitiesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::query_entities(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = QueryEntitiesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/microsoft.durabletask.implementation.protobuf.TaskHubSidecarService/CleanEntityStorage" => {
                    #[allow(non_camel_case_types)]
                    struct CleanEntityStorageSvc<T: TaskHubSidecarService>(pub Arc<T>);
                    impl<
                        T: TaskHubSidecarService,
                    > tonic::server::UnaryService<super::CleanEntityStorageRequest>
                    for CleanEntityStorageSvc<T> {
                        type Response = super::CleanEntityStorageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CleanEntityStorageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TaskHubSidecarService>::clean_entity_storage(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CleanEntityStorageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: TaskHubSidecarService> Clone for TaskHubSidecarServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: TaskHubSidecarService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: TaskHubSidecarService> tonic::server::NamedService for TaskHubSidecarServiceServer<T> {
        const NAME: &'static str =
            "microsoft.durabletask.implementation.protobuf.TaskHubSidecarService";
    }
}
